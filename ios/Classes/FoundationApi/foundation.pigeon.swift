// Copyright 2013 The Flutter Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.
// Autogenerated from Pigeon (v11.0.1), do not edit directly.
// See also: https://pub.dev/packages/pigeon

import Foundation
#if os(iOS)
import Flutter
#elseif os(macOS)
import FlutterMacOS
#else
#error("Unsupported platform.")
#endif

private func isNullish(_ value: Any?) -> Bool {
  return value is NSNull || value == nil
}

private func wrapResult(_ result: Any?) -> [Any?] {
  return [result]
}

private func wrapError(_ error: Any) -> [Any?] {
  if let flutterError = error as? FlutterError {
    return [
      flutterError.code,
      flutterError.message,
      flutterError.details
    ]
  }
  return [
    "\(error)",
    "\(type(of: error))",
    "Stacktrace: \(Thread.callStackSymbols)"
  ]
}

private func nilOrValue<T>(_ value: Any?) -> T? {
  if value is NSNull { return nil }
  return value as! T?
}
/// Mirror of NSObject.
///
/// See https://developer.apple.com/documentation/objectivec/nsobject.
///
/// Generated protocol from Pigeon that represents a handler of messages from Flutter.
protocol NSObjectHostApi {
  func dispose(identifier: String) throws
}

/// Generated setup class from Pigeon to handle messages through the `binaryMessenger`.
class NSObjectHostApiSetup {
  /// The codec used by NSObjectHostApi.
  /// Sets up an instance of `NSObjectHostApi` to handle messages through the `binaryMessenger`.
  static func setUp(binaryMessenger: FlutterBinaryMessenger, api: NSObjectHostApi?) {
    let disposeChannel = FlutterBasicMessageChannel(name: "dev.flutter.pigeon.flutter_instance_manager.NSObjectHostApi.dispose", binaryMessenger: binaryMessenger)
    if let api = api {
      disposeChannel.setMessageHandler { message, reply in
        let args = message as! [Any?]
        let identifierArg = args[0] as! String
        do {
          try api.dispose(identifier: identifierArg)
          reply(wrapResult(nil))
        } catch {
          reply(wrapError(error))
        }
      }
    } else {
      disposeChannel.setMessageHandler(nil)
    }
  }
}
/// Handles callbacks from an NSObject instance.
///
/// See https://developer.apple.com/documentation/objectivec/nsobject.
///
/// Generated class from Pigeon that represents Flutter messages that can be called from Swift.
class NSObjectFlutterApi {
  private let binaryMessenger: FlutterBinaryMessenger
  init(binaryMessenger: FlutterBinaryMessenger){
    self.binaryMessenger = binaryMessenger
  }
  func dispose(identifier identifierArg: String, completion: @escaping () -> Void) {
    let channel = FlutterBasicMessageChannel(name: "dev.flutter.pigeon.flutter_instance_manager.NSObjectFlutterApi.dispose", binaryMessenger: binaryMessenger)
    channel.sendMessage([identifierArg] as [Any?]) { _ in
      completion()
    }
  }
}
