// Autogenerated from Pigeon (v11.0.1), do not edit directly.
// See also: https://pub.dev/packages/pigeon

#import "InstanceManagerApis.h"

#if TARGET_OS_OSX
#import <FlutterMacOS/FlutterMacOS.h>
#else
#import <Flutter/Flutter.h>
#endif

#if !__has_feature(objc_arc)
#error File requires ARC to be enabled.
#endif

static NSArray *wrapResult(id result, FlutterError *error) {
  if (error) {
    return @[
      error.code ?: [NSNull null], error.message ?: [NSNull null], error.details ?: [NSNull null]
    ];
  }
  return @[ result ?: [NSNull null] ];
}
static id GetNullableObjectAtIndex(NSArray *array, NSInteger key) {
  id result = array[key];
  return (result == [NSNull null]) ? nil : result;
}

NSObject<FlutterMessageCodec> *InstanceManagerHostApiGetCodec(void) {
  static FlutterStandardMessageCodec *sSharedObject = nil;
  sSharedObject = [FlutterStandardMessageCodec sharedInstance];
  return sSharedObject;
}

void InstanceManagerHostApiSetup(id<FlutterBinaryMessenger> binaryMessenger, NSObject<InstanceManagerHostApi> *api) {
  /// Clear the native `InstanceManager`.
  ///
  /// This is typically only used after a hot restart.
  {
    FlutterBasicMessageChannel *channel =
      [[FlutterBasicMessageChannel alloc]
        initWithName:@"dev.flutter.pigeon.flutter_instance_manager.InstanceManagerHostApi.clear"
        binaryMessenger:binaryMessenger
        codec:InstanceManagerHostApiGetCodec()];
    if (api) {
      NSCAssert([api respondsToSelector:@selector(clearWithError:)], @"InstanceManagerHostApi api (%@) doesn't respond to @selector(clearWithError:)", api);
      [channel setMessageHandler:^(id _Nullable message, FlutterReply callback) {
        FlutterError *error;
        [api clearWithError:&error];
        callback(wrapResult(nil, error));
      }];
    } else {
      [channel setMessageHandler:nil];
    }
  }
}
NSObject<FlutterMessageCodec> *JavaObjectHostApiGetCodec(void) {
  static FlutterStandardMessageCodec *sSharedObject = nil;
  sSharedObject = [FlutterStandardMessageCodec sharedInstance];
  return sSharedObject;
}

void JavaObjectHostApiSetup(id<FlutterBinaryMessenger> binaryMessenger, NSObject<JavaObjectHostApi> *api) {
  {
    FlutterBasicMessageChannel *channel =
      [[FlutterBasicMessageChannel alloc]
        initWithName:@"dev.flutter.pigeon.flutter_instance_manager.JavaObjectHostApi.dispose"
        binaryMessenger:binaryMessenger
        codec:JavaObjectHostApiGetCodec()];
    if (api) {
      NSCAssert([api respondsToSelector:@selector(disposeIdentifier:error:)], @"JavaObjectHostApi api (%@) doesn't respond to @selector(disposeIdentifier:error:)", api);
      [channel setMessageHandler:^(id _Nullable message, FlutterReply callback) {
        NSArray *args = message;
        NSString *arg_identifier = GetNullableObjectAtIndex(args, 0);
        FlutterError *error;
        [api disposeIdentifier:arg_identifier error:&error];
        callback(wrapResult(nil, error));
      }];
    } else {
      [channel setMessageHandler:nil];
    }
  }
}
NSObject<FlutterMessageCodec> *JavaObjectFlutterApiGetCodec(void) {
  static FlutterStandardMessageCodec *sSharedObject = nil;
  sSharedObject = [FlutterStandardMessageCodec sharedInstance];
  return sSharedObject;
}

@interface JavaObjectFlutterApi ()
@property(nonatomic, strong) NSObject<FlutterBinaryMessenger> *binaryMessenger;
@end

@implementation JavaObjectFlutterApi

- (instancetype)initWithBinaryMessenger:(NSObject<FlutterBinaryMessenger> *)binaryMessenger {
  self = [super init];
  if (self) {
    _binaryMessenger = binaryMessenger;
  }
  return self;
}
- (void)disposeIdentifier:(NSString *)arg_identifier completion:(void (^)(FlutterError *_Nullable))completion {
  FlutterBasicMessageChannel *channel =
    [FlutterBasicMessageChannel
      messageChannelWithName:@"dev.flutter.pigeon.flutter_instance_manager.JavaObjectFlutterApi.dispose"
      binaryMessenger:self.binaryMessenger
      codec:JavaObjectFlutterApiGetCodec()];
  [channel sendMessage:@[arg_identifier ?: [NSNull null]] reply:^(id reply) {
    completion(nil);
  }];
}
@end

